%{
    #include "hw3_output.hpp"
    #include "gorila.h"
    #include "symbol_table_dinosaur.h"
    #include "bp.hpp"
    int yylex();
    void yyerror(const char *err_msg);
    extern int yylineno;
    Trex *trex;
    CodeBuffer code_buffer;
    extern int global_while_ctr;
    codeGen_chan *codegen_chan;
    #pragma GCC diagnostic ignored "-Wfree-nonheap-object"
%}

%nonassoc NUM
%token ID
%token STRING
%token INT
%token BYTE
%nonassoc B
%token BOOL
%left OR
%left AND
%token TRUE
%token FALSE
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%right ASSIGN
%left EQU
%left BLE
%nonassoc BINOP
%left PLUS_MINUS
%left MULT_DIVIDE
%right NOT
%left LBRACE
%left RBRACE
%left LPAREN
%left RPAREN
%right ELSE





%%


Program : Statements {}
Statements : Statement {}
            | Statements Statement {}
Statement   : LBRACE OPEN_SCOPE Statements RBRACE {remove_scope();} 
            | Type ID SC {add_symbol($1, $2);}
            | Type ID ASSIGN Exp SC {add_symbol($1, $2, $4);}
            | ID ASSIGN Exp SC {assign_symbol($1, $3);}
            | Call SC {$$ = $1;}
            | RETURN SC {codegen_chan->add_return();}
            | IF LPAREN CHECK_IF_EXP RPAREN OPEN_SCOPE Statement CLOSE_SCOPE {codegen_chan->end_if_actions();}
            | IF LPAREN CHECK_IF_EXP RPAREN OPEN_SCOPE Statement CLOSE_SCOPE ELSE {codegen_chan->skip_else();} OPEN_SCOPE Statement {remove_scope(); codegen_chan->end_else_actions();}
            | WHILE {codegen_chan->pre_while();} LPAREN CHECK_WHILE_EXP RPAREN OPEN_SCOPE {global_while_ctr++;} Statement {global_while_ctr--; remove_scope(); codegen_chan->end_while_actions();} 
            | BREAK SC {if(!global_while_ctr)
	                        {
		                        output::errorUnexpectedBreak(yylineno);
		                        exit(0);
	                        }
                        codegen_chan->add_break();}
            | CONTINUE SC {if(!global_while_ctr)
	                        {
		                        output::errorUnexpectedContinue(yylineno);
		                        exit(0);
	                        }
                            codegen_chan->add_continue();}
Call : ID LPAREN Exp RPAREN {Node* returned_val = call_function($1, $3);
                             if(returned_val != NULL){
                                $$ = new NUM_CLASS(returned_val);}
                                else {
                                    $$ = new Node("", "VOID");
                                }}
Type : INT {$$ = new Type_CLASS($1, "INT");}
      | BYTE {$$ = new Type_CLASS($1, "BYTE");}
      | BOOL {$$ = new Type_CLASS($1, "BOOL");}
Exp : LPAREN Exp RPAREN {$$ = $2;}
     | Exp MULT_DIVIDE Exp {Node *result = plus_minus_mult_divide($1, $2, $3);
                           if(result->type == "INT"){
                                $$ = new NUM_CLASS(result);
                           } else {
                                $$ = new NUMB(result);
                           }}
     | Exp PLUS_MINUS Exp {Node *result = plus_minus_mult_divide($1, $2, $3);
                           if(result->type == "INT"){
                                $$ = new NUM_CLASS(result);
                           } else {
                                $$ = new NUMB(result);
                           }}
     | ID {$$ = search_and_return_id($1);} // search in scopes and update type
     | Call {$$ = $1;}
     | NUM {$$ = CREATE_EXP_OF_NUM($1);}
     | NUM B {is_byte($1); $$ = CREATE_EXP_OF_NUMB($1);} 
     | STRING {$$ = add_string_literal($1);}
     | TRUE {$$ = create_bool_class_from_literal("true");}
     | FALSE {$$ = create_bool_class_from_literal("false");}
     | NOT Exp {is_bool($2); $$ = evaluate_not_exp($2);}
     | Exp AND Exp {is_bool($1); is_bool($3); $$ = evaluate_and_exp($1, $3);}
     | Exp OR Exp {is_bool($1); is_bool($3); $$ = evaluate_or_exp($1, $3);}
     | Exp BLE Exp {is_num($1); is_num($3); $$ = calc_relop($1, $2, $3);}
     | Exp EQU Exp {is_num($1); is_num($3); $$ = calc_relop($1, $2, $3);}
     | LPAREN Type RPAREN Exp {Node* node = try_number_cast_type($2, $4); if (node->type=="INT")
     {
        $$ = new NUM_CLASS(node);
     }
     else{
        $$ = new NUMB(node);
     }}

CHECK_WHILE_EXP : Exp {Node* node = is_bool($1); codegen_chan->add_while_labels(node); $$ = node;}
CHECK_IF_EXP : Exp {Node* node = is_bool($1); codegen_chan->add_if_labels(node); $$ = node;}
OPEN_SCOPE : {add_scope();}
CLOSE_SCOPE : {remove_scope();}

%%


int main () {
    trex = new Trex();
    codegen_chan = new codeGen_chan();
    codegen_chan->emit_globals();
    codegen_chan->emit_open_main_chan();
    int rc = yyparse();
    trex->remove_scope();
    codegen_chan->add_closing_scope();
    codegen_chan->code_buffer.printGlobalBuffer();
    codegen_chan->code_buffer.printCodeBuffer();
    return rc;
}

void yyerror(const char *err_msg){
	output::errorSyn(yylineno);
	exit(0);
}
